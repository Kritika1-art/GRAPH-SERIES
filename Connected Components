1-2-3-4		5	  	 	6				9		
				  	   / \	
				      7   8

  (a)		(b)		   (c)				(d)


Here the above four fig.s are looking like four graphs, but it is actually a single graph.


It is actually a disconnected graph.


Now if we try to traverse the graph we only will be able to traverse a single graph, we can't reach other components.

so to reach every node of a graph, whether it is a connected or disconnected graph.

we use the concept of visited array:

1. Take a visited array with length n i.e., nodes.
2. Set visited array, default as zero
3. Then while traversing check if the node is not visited i.e., 0.

CODE:

int vis[n+1] = {0};

for(int i=0;i<n;i++)
{
	if(!vis[i])
	{
		traversal(i); //use any traversal technique 
	}
}

